目前流行的格式有如下几种:reST，是目前最广泛的一种方式，是Sphinx原生支持的格式。还有Epytext，好像是从Java那来的。如果你在Swagger Codegen上生成过Python 代码会发现其中的格式也是reST。还有一种比较流行的是Google自家用的格式，貌似更简洁一些，格式可以参考这里。Numpy团队在Google的基础上搞了一套格式。


1. Epytext：Epytext是一种基于文本的标记语言，用于编写Python文档字符串。它使用简单的标记来描述函数、类和模块，并且支持添加参数、返回值、异常等注释。Epytext的语法简单易懂，适用于生成API文档。例如：

【Epytext】
"""
This is a javadoc style.

@param param1: this is a first param
@param param2: this is a second param
@return: this is a description of what is returned
@raise keyError: raises an exception
"""


2. reStructuredText（reST）：reStructuredText是一种轻量级标记语言，广泛用于编写Python文档和其他技术文档。reST提供了丰富的标记语法，可以描述函数、类、模块、代码示例等。它还支持表格、引用、链接等高级特性，是编写复杂文档的有力工具。以下是一个使用reST的示例：

【reST】
"""
This is a reST style.

:param param1: this is a first param
:param param2: this is a second param
:returns: this is a description of what is returned
:raises keyError: raises an exception
"""


3. Google风格：Google风格的Python文档字符串是在reST基础上发展而来的，由Google开发者提出并广泛应用于Google的项目中。它使用简单的标记和约定来描述函数、类和模块，支持参数、返回值、异常、示例等注释。Google风格的文档字符串在Python社区中非常流行，并且被许多第三方库所采用。以下是一个使用Google风格的示例：

【Google】
"""
This is an example of Google style.

Args:
    param1: This is the first param.
    param2: This is a second param.

Returns:
    This is a description of what is returned.

Raises:
    KeyError: Raises an exception.
"""


4. Numpydoc：Numpydoc是专门为NumPy库设计的一种文档字符串风格，但也被其他科学计算库广泛采用。它在Google风格的基础上做了一些调整，特别适合描述NumPy数组、函数、参数和返回值的详细信息。以下是一个使用Numpydoc的示例：

【Numpydoc】
"""
My numpydoc description of a kind
of very exhautive numpydoc format docstring.

Parameters
----------
first : array_like
    the 1st param name `first`
second :
    the 2nd param
third : {'value', 'other'}, optional
    the 3rd param, by default 'value'

Returns
-------
string
    a value in a string

Raises
------
KeyError
    when a key error
OtherError
    when an other error
"""